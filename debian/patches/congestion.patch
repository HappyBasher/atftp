--- a/tftp_file.c
+++ b/tftp_file.c
@@ -259,7 +259,7 @@
                if (multicast)
                {
                     result = tftp_get_packet(sockfd, mcast_sockfd, NULL, &sa, &from,
-                                             NULL, data->timeout, &data_size,
+                                             NULL, data->timeout, 0, &data_size,
                                              data->data_buffer);
                     /* RFC2090 state we should verify source address as well
                        as source port */
@@ -272,7 +272,7 @@
                else
                {
                     result = tftp_get_packet(sockfd, -1, NULL, &sa, &from, NULL,
-                                             data->timeout, &data_size,
+                                             data->timeout, 0, &data_size,
                                              data->data_buffer);
                     /* Check that source port match */
                     if ((sockaddr_get_port(&sa) != sockaddr_get_port(&from)) &&
@@ -649,6 +649,7 @@
      int timeout_state = state; /* what state should we go on when timeout */
      int windowblock = 0;       /* number of block in a window, c.f. RFC7440 */
      int windowsize = 1;        /* c.f. RFC7440 */
+     int delay = 0;             /* delay between datagrams in a window */
      int result;
      long block_number = 0;
      long last_requested_block = -1;
@@ -789,13 +790,13 @@
                     windowblock = 0;
                     /* we wait for the ACK */
                     result = tftp_get_packet(sockfd, -1, NULL, &sa, &from, NULL,
-                                             data->timeout, &data_size, data->data_buffer);
+                                             data->timeout, 0, &data_size, data->data_buffer);
                }
                else
                {
                     /* we check if an unsolicitated ACK arrived */
                     result = tftp_get_packet(sockfd, -1, NULL, &sa, &from, NULL,
-                                             0, &data_size, data->data_buffer);
+                                             0, delay, &data_size, data->data_buffer);
                     if (result == GET_TIMEOUT)
                     {
                          /* we send the next block */
--- a/tftp_io.c
+++ b/tftp_io.c
@@ -207,7 +207,7 @@
  */
 int tftp_get_packet(int sock1, int sock2, int *sock, struct sockaddr_storage *sa,
                     struct sockaddr_storage *sa_from, struct sockaddr_storage *sa_to,
-                    int timeout, int *size, char *data)
+                    int timeout, int timeout_usec, int *size, char *data)
 {
      int result;
      struct timeval tv;
@@ -235,8 +235,8 @@
 
      /* Wait up to five seconds. */
      tv.tv_sec = timeout;
-     /* FIXME: Non zero value (not too small) is needed, why? */
-     tv.tv_usec = 10;
+     /* Delay between datagrams in a window. */
+     tv.tv_usec = timeout_usec;
 
      /* Watch socket to see when it has input. */
      FD_ZERO(&rfds);
--- a/tftp_io.h
+++ b/tftp_io.h
@@ -51,7 +51,7 @@
                    int size, char *data);
 int tftp_get_packet(int sock1, int sock2, int *sock, struct sockaddr_storage *sa,
                     struct sockaddr_storage *from, struct sockaddr_storage *to,
-                    int timeout, int *size, char *data);
+                    int timeout, int timeout_usec, int *size, char *data);
 int tftp_file_read(FILE *fp, char *buffer, int buffer_size, long block_number, int convert,
                    long *prev_block_number, long *prev_file_pos, int *temp);
 int tftp_file_write(FILE *fp, char *data_buffer, int data_buffer_size, long block_number,
--- a/tftp_mtftp.c
+++ b/tftp_mtftp.c
@@ -328,7 +328,7 @@
                data_size = data->data_buffer_size;
                /* receive the data */
                result = tftp_get_packet(sockfd, mcast_sockfd, &sock, &sa, &from,
-					NULL, timeout, &data_size,
+					NULL, timeout, 0, &data_size,
 					data->data_buffer);
                switch (result)
                {
--- a/tftpd.c
+++ b/tftpd.c
@@ -652,7 +652,7 @@
      /* Read the first packet from stdin. */
      data_size = data->data_buffer_size;
      retval = tftp_get_packet(0, -1, NULL, &data->client_info->client, NULL,
-                              &to, data->timeout, &data_size,
+                              &to, data->timeout, 0, &data_size,
                               data->data_buffer);
      if (retval == ERR) {
           logger(LOG_NOTICE, "Invalid request in 1st packet");
--- a/tftpd_file.c
+++ b/tftpd_file.c
@@ -261,7 +261,7 @@
           case S_WAIT_PACKET:
                data_size = data->data_buffer_size;
                result = tftp_get_packet(sockfd, -1, NULL, sa, &from, NULL,
-                                        timeout, &data_size, data->data_buffer);
+                                        timeout, 0, &data_size, data->data_buffer);
                
                switch (result)
                {
@@ -448,6 +448,7 @@
      int windowblock = 0;
      int windowsize = 1;
      int in_window_ack = -1;
+     int delay = 0;             /* delay between datagrams in a window */
      int number_of_timeout = 0;
      int mcast_switch = data->mcast_switch_client;
      struct stat file_stat;
@@ -838,12 +839,14 @@
                if ((windowblock >= windowsize) || (last_ackd_block == -1) || (last_block != -1)) {
                     /* we wait for the ACK */
                     result = tftp_get_packet(sockfd, -1, NULL, sa, &from, NULL,
-                                             timeout, &data_size, data->data_buffer);
+                                             timeout, 0, &data_size, data->data_buffer);
+                    if ((delay > 0) && (in_window_ack == 0))
+                         delay--;
                     in_window_ack = 0;
                } else {
                     /* we check if an unsolicitated ACK arrived */
                     result = tftp_get_packet(sockfd, -1, NULL, sa, &from, NULL,
-                                             0, &data_size, data->data_buffer);
+                                             0, delay, &data_size, data->data_buffer);
                     if (result == GET_TIMEOUT) {
                          /* we send the next block */
                          block_number = tftp_rollover_blocknumber(
@@ -1033,9 +1036,13 @@
                                         logger(LOG_DEBUG, "ignore outdated/duplicate ACK: %ld", block_number);
                                    break;
                               }
-                              if ((last_ackd_block + windowsize != block_number) && (last_ackd_block != -1) && (last_block == -1))
-                                   logger(LOG_WARNING, "window block %ld not complete/ordered: %ld/%d valid",
-                                          block_number, block_number - last_ackd_block, windowsize);
+                              if ((last_ackd_block + windowsize != block_number) &&
+                                  (last_ackd_block != -1) && (last_block == -1)) {
+                                   logger(LOG_WARNING, "window block %ld not complete/ordered: %ld/%d valid, delay: %d usec",
+                                          block_number, block_number - last_ackd_block, windowsize, delay);
+                                   if (delay < timeout * 1000 / windowsize)
+                                        delay += 10;
+                              }
                               if (data->trace)
                                    logger(LOG_DEBUG, "update last ACK'd <block: %ld â†’ %ld>", last_ackd_block, block_number);
                               last_ackd_block = block_number;
--- a/tftpd_mtftp.c
+++ b/tftpd_mtftp.c
@@ -389,7 +389,7 @@
                memset(&sa, 0, sizeof(sa)); /* this will hold the client info */
                data_size = data->data_buffer_size;
                retval = tftp_get_packet(sockfd, -1, NULL, &sa, NULL, NULL,
-                                        data->timeout,
+                                        data->timeout, 0,
                                         &data_size, data->data_buffer);
 
 #ifdef HAVE_WRAP
@@ -596,7 +596,7 @@
           case S_WAIT_PACKET:
                data_size = data->data_buffer_size;
                result = tftp_get_packet(sockfd, -1, NULL, sa, &from, NULL,
-                                        data->mtftp_data->timeout,
+                                        data->mtftp_data->timeout, 0,
                                         &data_size, data->data_buffer);
 
                switch (result)
