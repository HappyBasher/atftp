Description: Fix multicast download.
 For multicast transfers, the sequence of blocks is in general not
 monotonic and only the current master client sends ACKs.  The patch
 takes this into account by moving some acknowlegement related code
 into a conditional: (!multicast) || (multicast && master_client).
 Tested by setting up a multicast test environment (c.f. test script).
Author: Andreas B. Mundt <andi@debian.org>
Forwarded: https://sourceforge.net/p/atftp/support-requests/10/
Last-Update: 2022-08-30
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/

--- a/tftp_file.c
+++ b/tftp_file.c
@@ -245,7 +245,7 @@
                     /* walk the bitmap to find the next missing block */
                     prev_bitmap_hole =
                          tftp_find_bitmap_hole(prev_bitmap_hole, file_bitmap);
-                    block_number = prev_bitmap_hole;
+                    block_number = last_received_block = prev_bitmap_hole;
                }
                /* This might be used for simulating a lost ACK (with windowsize=32):
                if ((last_received_block != 320) || (debug != 0)) {
@@ -544,42 +544,40 @@
                     state = S_WAIT_PACKET;
                break;
           case S_DATA_RECEIVED:
-               if ((multicast && master_client) || (!multicast))
-                    timeout_state = S_SEND_ACK;
+               if (multicast)
+                    block_number = ntohs(tftphdr->th_block);
                else
-                    timeout_state = S_WAIT_PACKET;
+                    block_number = tftp_rollover_blocknumber(ntohs(tftphdr->th_block), prev_block_number, 0);
 
-	       if (multicast)
-		    block_number = ntohs(tftphdr->th_block);
-	       else
-	       {
-		    block_number = tftp_rollover_blocknumber(
-			ntohs(tftphdr->th_block), prev_block_number, 0);
-	       }
                if ((last_received_block < windowsize) && (timeout_state = S_SEND_OACK))
                     timeout_state = S_SEND_ACK;
 
-               /* The sequence of blocks may contain a gap, i.e. (block_number > last_received_block + 1).
-                  Send an extra ACK for the last block before the gap once.
+               if ((!multicast) || (multicast && master_client)) {
+                    timeout_state = S_SEND_ACK;
+                    /* The sequence of blocks may contain a gap, i.e. (block_number > last_received_block + 1).
+                       Send an extra ACK for the last block before the gap once.
 
-                  The ACK of a received window gets lost.  The sender times out and starts
-                  sending all blocks of that window again, i.e. (block_number < last_received_block + 1).
-                  Again, send the extra ACK. */
-               if (block_number != last_received_block + 1) {
-                    if (extra_ack < 1) {
-                         fprintf(stderr, "got wrong block <block: %ld>, sending extra ACK for <block: %ld>\n",
-                                 block_number, last_received_block);
-                         extra_ack++;
-                         state = S_SEND_ACK;
-                    } else {
-                         fprintf(stderr, "got wrong block <block: %ld>, ignoring\n", block_number);
-                         state = S_WAIT_PACKET;
+                       The ACK of a received window gets lost.  The sender times out and starts
+                       sending all blocks of that window again, i.e. (block_number < last_received_block + 1).
+                       Again, send the extra ACK. */
+                    if (block_number != last_received_block + 1) {
+                         if (extra_ack < 1) {
+                              fprintf(stderr, "got wrong block <block: %ld>, sending extra ACK for <block: %ld>\n",
+                                      block_number, last_received_block);
+                              extra_ack++;
+                              state = S_SEND_ACK;
+                         } else {
+                              fprintf(stderr, "got wrong block <block: %ld>, ignoring\n", block_number);
+                              state = S_WAIT_PACKET;
+                         }
+                         break;
                     }
-                    break;
+                    extra_ack = 0;
+                    windowblock++;
+               } else {
+                    timeout_state = S_WAIT_PACKET;
                }
-               extra_ack = 0;
 
-               windowblock++;
                if (data->trace)
                     fprintf(stderr, "received %d. DATA <block: %ld, size %d>, update last received block: %ld â†’ %ld\n",
                             windowblock, block_number, data_size - 4, last_received_block, block_number);
