--- a/test/test.sh
+++ b/test/test.sh
@@ -4,6 +4,8 @@
 #
 # It needs ~150MB free diskspace in $TEMPDIR
 
+set -e
+
 # assume we are called in the source tree after the build
 # so binaries are one dir up
 ATFTP=../atftp
@@ -106,39 +108,55 @@
 	fi
 }
 
-function test_get_put() {
-	local READFILE="$1"
-	shift
-	echo -n " get, ${READFILE} ($*)... "
-	if [ "$1" = "--option" ]; then
-		$ATFTP "$1" "$2" --get --remote-file ${READFILE} --local-file out.bin $HOST $PORT 2>/dev/null
-	else
-		$ATFTP --get --remote-file ${READFILE} --local-file out.bin $HOST $PORT 2>/dev/null
-	fi
-	check_file $DIRECTORY/${READFILE} out.bin
-	echo -n " put, ${READFILE} ($*)... "
-	if [ "$1" = "--option" ]; then
-		$ATFTP "$1" "$2" --put --remote-file $WRITE --local-file $DIRECTORY/${READFILE} $HOST $PORT 2>/dev/null
-	else
-		$ATFTP --put --remote-file $WRITE --local-file $DIRECTORY/${READFILE} $HOST $PORT 2>/dev/null
-	fi
-	# wait a second
-	# because in some case the server may not have time to close the file
-	# before the file compare.
-	sleep 1
-	check_file $DIRECTORY/${READFILE} $DIRECTORY/$WRITE
-	rm -f $DIRECTORY/$WRITE out.bin
+function check_trace() {
+    local FILE="$1"
+    local oack tsize wsize bsize c d e
+    oack=$(grep "OACK" "$FILE")
+    tsize=$(echo $oack | sed -E "s/.*tsize: ([0-9]+).*/\1/")
+    wsize=$(echo $oack | sed -E "s/.*windowsize: ([0-9]+).*/\1/")
+    bsize=$(echo $oack | sed -E "s/.*blksize: ([0-9]+).*/\1/")
+    c=$(grep -E "DATA <block:" "$FILE" | wc -l)
+    d=$(grep "ACK <block:" "$FILE" | wc -l)
+    e=$(grep "sent ACK <block: 0>" "$FILE" | wc -l)
+    ## e is for the ACK of the OACK
+    ## the +1 is the last block, it might be empty and ist ACK'd:
+    if [[ $((tsize/bsize + 1)) -ne $c ]] || \
+           [[ $((tsize/(bsize*wsize) + 1 + e)) -ne $d ]] ; then
+        echo -e "\nexpected blocks: $((tsize/bsize + 1)), received/sent blocks: $c"
+        echo "expected ACKs: $((tsize/(bsize*wsize) + 1)), sent/received ACKs: $((d-e))"
+        ERROR=1
+    else
+        echo -n "$c blocks, $((d-e)) ACKs â†’ "
+    fi
 }
 
-function test_blocksize() {
-	echo -n " block size $1 bytes ... "
-	$ATFTP --option "blksize $1" --trace --get -r $READ_128K -l /dev/null $HOST $PORT 2> out
-	if  [ $(grep DATA out | wc -l) -eq $(( 128*1024 / $1 + 1)) ]; then
-		echo "OK"
-	else
-		echo "ERROR"
-		ERROR=1
-	fi
+function test_get_put() {
+    local FILE="$1"
+    shift
+    echo -n " get, ${FILE} ($@) ... "
+    if [[ $@ == *--trace* ]] ; then
+        stdout="$DIRECTORY/$WRITE.stdout"
+    else
+        stdout="/dev/null"
+    fi
+    $ATFTP "$@" --get --remote-file ${FILE} \
+           --local-file out.bin $HOST $PORT 2> $stdout
+    if [[ -f "$stdout" ]] ;  then
+        check_trace "$stdout"
+    fi
+    check_file $DIRECTORY/${FILE} out.bin
+
+    echo -n " put, ${FILE} ($@) ... "
+    $ATFTP "$@" --put --remote-file $WRITE \
+           --local-file $DIRECTORY/${FILE} $HOST $PORT 2> $stdout
+    # wait a second because in some case the server may not have time to close the file
+    # before the file compare.
+    if [[ -f "$stdout" ]] ;  then
+        check_trace "$stdout"
+    fi
+    sleep 1
+    check_file $DIRECTORY/${FILE} $DIRECTORY/$WRITE
+    rm -f "$DIRECTORY/$WRITE" "$DIRECTORY/$WRITE.stdout" out.bin
 }
 
 # make sure we have /tftpboot with some files
@@ -157,6 +175,7 @@
 READ_BIG=READ_BIG.bin
 READ_128K=READ_128K.bin
 READ_1M=READ_1M.bin
+READ_10M=READ_10M.bin
 READ_101M=READ_101M.bin
 WRITE=write.bin
 
@@ -169,15 +188,17 @@
 dd if=/dev/urandom of=$DIRECTORY/$READ_BIG bs=1 count=51111 2>/dev/null
 dd if=/dev/urandom of=$DIRECTORY/$READ_128K bs=1K count=128 2>/dev/null
 dd if=/dev/urandom of=$DIRECTORY/$READ_1M bs=1M count=1 2>/dev/null
+dd if=/dev/urandom of=$DIRECTORY/$READ_10M bs=1M count=10 2>/dev/null
 dd if=/dev/urandom of=$DIRECTORY/$READ_101M bs=1M count=101 2>/dev/null
 echo "done"
 
 start_server
+trap stop_server EXIT SIGINT SIGTERM
 
-#
-# test get and put
-#
-echo "Testng get and put with standard options"
+###
+### test get and put
+###
+echo "Testing get and put with standard options"
 test_get_put $READ_0
 test_get_put $READ_511
 test_get_put $READ_512
@@ -186,10 +207,9 @@
 test_get_put $READ_128K
 test_get_put $READ_1M
 test_get_put $READ_101M
-
+#
 echo
 echo "Testing get and put with misc blocksizes"
-
 test_get_put $READ_BIG --option "blksize 8"
 test_get_put $READ_BIG --option "blksize 256"
 test_get_put $READ_1M --option "blksize 1428"
@@ -197,12 +217,20 @@
 test_get_put $READ_1M --option "blksize 16000"
 test_get_put $READ_1M --option "blksize 40000"
 test_get_put $READ_1M --option "blksize 65464"
+#
+echo
+echo "Testing get and put with misc windowsizes"
+## use some options here to allow trace analysis:
+test_get_put $READ_2K --option "windowsize 1" --option "tsize 0" --option "blksize 1024" --trace
+test_get_put $READ_2K --option "windowsize 2" --option "tsize 0" --option "blksize 512" --trace
+test_get_put $READ_2K --option "windowsize 4" --option "tsize 0" --option "blksize 256" --trace
+test_get_put $READ_128K --option "windowsize 8" --option "tsize 0" --option "blksize 1024" --trace
+test_get_put $READ_128K --option "windowsize 16" --option "tsize 0" --option "blksize 512" --trace
+test_get_put $READ_101M --option "windowsize 32" --option "tsize 0" --option "blksize 1428" --trace
 
-# do not run the following test as it will hang...
-
-#echo
-#echo "Testing large file with small blocksize so block numbers will wrap over 65536"
-#test_get_put $READ_1M --option "blksize 10"
+echo
+echo "Testing large file with small blocksize so block numbers will wrap over 65536"
+test_get_put $READ_10M --option "windowsize 1" --option "tsize 0" --option "blksize 128" --trace
 
 #
 # testing for invalid file name
@@ -210,7 +238,9 @@
 OUTPUTFILE="01-out"
 echo
 echo -n "Test detection of non-existing file name ... "
+set +e
 $ATFTP --trace --get -r "thisfiledoesntexist" -l /dev/null $HOST $PORT 2> "$OUTPUTFILE"
+set -e
 if grep -q "<File not found>" "$OUTPUTFILE"; then
 	echo OK
 else
@@ -226,16 +256,20 @@
 echo
 echo "Testing blksize option ..."
 echo -n " smaller than minimum ... "
+set +e
 $ATFTP --option "blksize 7" --trace --get -r $READ_2K -l /dev/null $HOST $PORT 2> "$OUTPUTFILE"
-if grep -q "<Failure to negotiate RFC1782 options>" "$OUTPUTFILE"; then
+set -e
+if grep -q "<Failure to negotiate RFC2347 options>" "$OUTPUTFILE"; then
 	echo OK
 else
 	echo ERROR
 	ERROR=1
 fi
 echo -n " bigger than maximum ... "
+set +e
 $ATFTP --option "blksize 65465" --trace --get -r $READ_2K -l /dev/null $HOST $PORT 2> "$OUTPUTFILE"
-if grep -q "<Failure to negotiate RFC1782 options>" "$OUTPUTFILE"; then
+set -e
+if grep -q "<Failure to negotiate RFC2347 options>" "$OUTPUTFILE"; then
 	echo OK
 else
 	echo ERROR
@@ -264,16 +298,20 @@
 echo ""
 echo "Testing timeout option limit..."
 echo -n " minimum ... "
+set +e
 $ATFTP --option "timeout 0" --trace --get -r $READ_2K -l /dev/null $HOST $PORT 2> "$OUTPUTFILE"
-if grep -q "<Failure to negotiate RFC1782 options>" "$OUTPUTFILE"; then
+set -e
+if grep -q "<Failure to negotiate RFC2347 options>" "$OUTPUTFILE"; then
 	echo OK
 else
 	echo ERROR
 	ERROR=1
 fi
 echo -n " maximum ... "
+set +e
 $ATFTP --option "timeout 256" --trace --get -r $READ_2K -l /dev/null $HOST $PORT 2> "$OUTPUTFILE"
-if grep -q "<Failure to negotiate RFC1782 options>" "$OUTPUTFILE"; then
+set -e
+if grep -q "<Failure to negotiate RFC2347 options>" "$OUTPUTFILE"; then
 	echo OK
 else
 	echo ERROR
@@ -286,8 +324,10 @@
 OUTPUTFILE="05-out"
 echo
 echo -n "Test returncode after timeout when server is unreachable ... "
+set +e
 $ATFTP --put --local-file "$DIRECTORY/$READ_2K" 127.0.0.77 2>"$OUTPUTFILE"
 Retval=$?
+set -e
 echo -n "Returncode $Retval: "
 if [ $Retval -eq 255 ]; then
 	echo "OK"
@@ -342,7 +382,7 @@
 	rmdir "$SMALL_FS_DIR"
 else
 	echo
-	echo "Disk-out-of-space tests not performed, start with \"WANT_INTERACTIVE_TESTS=yes ./test.sh\" if desired." 
+	echo "Disk-out-of-space tests not performed, start with \"WANT_INTERACTIVE_TESTS=yes ./test.sh\" if desired."
 fi
 
 # Test that timeout is well set to 1 sec and works.
@@ -383,7 +423,7 @@
 			min=$(echo $line | cut -d ":" -f 2)
 			sec=$(echo $line | cut -d ":" -f 3)
 			cur=$(( 24*60*10#$hrs + 60*10#$min + 10#$sec ))
-	
+
 			if [ $prev -gt 0 ]; then
 				if [ $(($cur - $prev)) != 1 ]; then
 					res="ERROR"
@@ -428,29 +468,30 @@
 #
 echo
 echo "Testing high server load"
-echo -n "  starting $NBSERVER simultaneous atftp get processes ... "
+echo -n "  starting $NBSERVER simultaneous atftp get processes "
 #( for i in $(seq 1 $NBSERVER); do
 #	($ATFTP --get --remote-file $READ_1M --local-file /dev/null $HOST $PORT 2> out.$i) &
 #	echo -n "+"
 #done )
-for i in $(seq 1 $NBSERVER)
-do
-	$ATFTP --get --remote-file $READ_1M --local-file /dev/null $HOST $PORT 2> "$DIRECTORY/high-server-load-out.$i" &
+set +e
+for i in $(seq 1 $NBSERVER) ; do
+    echo -n "."
+    $ATFTP --get --remote-file $READ_1M --local-file /dev/null $HOST $PORT 2> "$DIRECTORY/high-server-load-out.$i" &
 done
-echo "done"
-let CHECKCOUNTER=0
-let MAXCHECKS=90
+set -e
+echo " done"
+CHECKCOUNTER=0
+MAXCHECKS=90
 while [[ $CHECKCOUNTER -lt $MAXCHECKS ]]; do
 	PIDCOUNT=$(pidof $ATFTP|wc -w)
 	if [ $PIDCOUNT -gt 0 ]; then
 		echo "  wait for atftp processes to complete: $PIDCOUNT running"
-		let CHECKCOUNTER+=1
+		CHECKCOUNTER=$((CHECKCOUNTER + 1))
 		sleep 1
 	else
-		let CHECKCOUNTER=$MAXCHECKS+1
+		CHECKCOUNTER=$((MAXCHECKS + 1))
 	fi
 done
-
 #
 # high server load test passed, now examine the results
 #
@@ -461,7 +502,8 @@
 done
 
 # remove timeout/retry messages, they are no error indicator
-grep -v "timeout: retrying..." <"$DIRECTORY/high-server-load-out.result" >"$DIRECTORY/high-server-load-out.clean-result"
+grep -v "timeout: retrying..." "$DIRECTORY/high-server-load-out.result" \
+     > "$DIRECTORY/high-server-load-out.clean-result" || true
 
 # the remaining output is considered as error messages
 error_cnt=$(wc -l <"$DIRECTORY/high-server-load-out.clean-result")
@@ -480,8 +522,6 @@
 # remove all empty output files
 find "$DIRECTORY" -name "high-server-load-out.*" -size 0 -delete
 
-stop_server
-
 echo
 
 # cleanup
@@ -491,7 +531,7 @@
 	echo "Cleaning up test files"
 	rm -f ??-out $SERVER_LOG
 	cd "$DIRECTORY"
-	rm -f $READ_0 $READ_511 $READ_512 $READ_2K $READ_BIG $READ_128K $READ_1M $READ_101M $WRITE high-server-load-out.*
+	rm -f $READ_0 $READ_511 $READ_512 $READ_2K $READ_BIG $READ_128K $READ_1M $READ_10M $READ_101M $WRITE high-server-load-out.*
 	cd ..
 	rmdir "$DIRECTORY"
 fi
