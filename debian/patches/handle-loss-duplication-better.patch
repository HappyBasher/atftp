Description: Improve algorithm in case of packet loss or duplication.
 Two independent cases:
 • Do not send multiple identical ACKs without a timeout occurring.
   This can happen when a single block is missing within a window.
   The blocks following in that window should not trigger further
   ACKs.
 • If an outdated/duplicated block is received, just send a single
   ACK and ignore all other already received blocks.
Author: Andreas B. Mundt <andi@debian.org>
Forwarded: https://sourceforge.net/p/atftp/support-requests/10/
Last-Update: 2022-08-24
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/

--- a/tftp_file.c
+++ b/tftp_file.c
@@ -119,6 +119,8 @@
      long block_number = 0;
      long last_received_block = 0;
      long last_block_number = -1;  /* block number of last block for multicast */
+     int extra_ack = 0;            /* number of additional ACKs */
+     //int debug = 0;              /* used for simulating datagram losses */
      int data_size;                /* size of data received */
      int sockfd = data->sockfd;    /* just to simplify calls */
      struct sockaddr_storage sa;   /* a copy of data.sa_peer */
@@ -245,9 +247,17 @@
                          tftp_find_bitmap_hole(prev_bitmap_hole, file_bitmap);
                     block_number = prev_bitmap_hole;
                }
+               /* This might be used for simulating a lost ACK (with windowsize=32):
+               if ((last_received_block != 320) || (debug != 0)) {
+                    tftp_send_ack(sockfd, &sa, last_received_block);
+               } else {
+                    debug++;
+               }
+                  Comment the next line if debugging is activated! */
+               tftp_send_ack(sockfd, &sa, last_received_block);
                if (data->trace)
                     fprintf(stderr, "sent ACK <block: %ld>\n", last_received_block);
-               tftp_send_ack(sockfd, &sa, last_received_block);
+
                /* if we just ACK the last block we are done */
                if (block_number == last_block_number)
                     state = S_END;
@@ -293,7 +303,8 @@
                {
                case GET_TIMEOUT:
                     number_of_timeout++;
-                    fprintf(stderr, "timeout: retrying...\n");
+                    extra_ack = 0;
+                    fprintf(stderr, "timeout: retrying ...\n");
                     if (number_of_timeout > NB_OF_RETRY)
                          state = S_ABORT;
                     else
@@ -547,12 +558,28 @@
 	       }
                if ((last_received_block < windowsize) && (timeout_state = S_SEND_OACK))
                     timeout_state = S_SEND_ACK;
-               if (last_received_block + 1 != block_number)
-               {
-                    fprintf(stderr, "got wrong block <block: %ld>\n", block_number);
-                    state = S_SEND_ACK;
+
+               /* The sequence of blocks may contain a gap, i.e. (block_number > last_received_block + 1).
+                  Send an extra ACK for the last block before the gap once.
+
+                  The ACK of a received window gets lost.  The sender times out and starts
+                  sending all blocks of that window again, i.e. (block_number < last_received_block + 1).
+                  Again, send the extra ACK. */
+               if (block_number != last_received_block + 1)
+               {
+                    fprintf(stderr, "got wrong block <block: %ld>, ", block_number);
+                    if (extra_ack < 1) {
+                         fprintf(stderr, "sending extra ACK for <block: %ld>\n", last_received_block);
+                         extra_ack++;
+                         state = S_SEND_ACK;
+                    } else {
+                         fprintf(stderr, "ignoring\n");
+                         state = S_WAIT_PACKET;
+                    }
                     break;
                }
+               extra_ack = 0;
+
                windowblock++;
                if (data->trace)
                     fprintf(stderr, "received %d. DATA <block: %ld, size %d>, update last received block: %ld → %ld\n",
@@ -819,7 +846,7 @@
                {
                case GET_TIMEOUT:
                     number_of_timeout++;
-                    fprintf(stderr, "timeout: retrying...\n");
+                    fprintf(stderr, "timeout: retrying ...\n");
                     if (number_of_timeout > NB_OF_RETRY)
                          state = S_ABORT;
                     else
