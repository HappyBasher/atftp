Description: Fix many typos.
Origin: lintian
Forwarded: yes

---
 FAQ          |  2 +-
 atftpd.8     | 10 +++++-----
 logger.c     |  2 +-
 stats.h      |  2 +-
 tftp.c       |  6 +++---
 tftp_file.c  |  8 ++++----
 tftp_mtftp.c |  2 +-
 tftpd.c      |  8 ++++----
 tftpd_file.c | 14 +++++++-------
 9 files changed, 27 insertions(+), 27 deletions(-)

--- a/FAQ
+++ b/FAQ
@@ -6,7 +6,7 @@
 how to tune them.
 
 --tftpd-timeout controls how much time the server will wait for an
-incomming connection before killing the main thread. If you use small
+incoming connection before killing the main thread. If you use small
 number, the server will be respawned by inetd when a new query
 arrives. If number is high, atftpd will behave more like a standalone
 server in that it will always receive queries directly. When booting a
--- a/atftpd.8
+++ b/atftpd.8
@@ -20,7 +20,7 @@
 .SH DESCRIPTION
 .B atftpd
 is a TFTP (RFC1350) server. By default it is started by inetd on most
-sytems, but may run as a stand alone daemon. This server is
+systems, but may run as a stand alone daemon. This server is
 multi-threaded and supports all options described in RFC2347 (option
 extension), RFC2348 (blksize), RFC2349 (tsize and timeout) and RFC2090
 (multicast option). It also supports mtftp as defined in the PXE
@@ -151,7 +151,7 @@
 
 .TP
 .B \-\-pcre <file>
-Specify a pattern/replacement file to use. This allow to replace
+Specify a pattern/replacement file to use. This allows one to replace
 requested file name based on Perl Compatible Regular Expression. See
 README.PCRE.
 
@@ -169,7 +169,7 @@
 
 .TP
 .B \-\-mtftp\-port <port>
-Port the mtftp server shall listen to for incomming request.
+Port the mtftp server shall listen to for incoming request.
 
 .TP
 .B \-\-no\-source\-port\-checking
@@ -182,14 +182,14 @@
 
 .TP
 .B \-\-mcast\-switch\-client
-This option allow the server to proceed with the next multicast client
+This option allows the server to proceed with the next multicast client
 as soon as the current client timeout. When the current master client
 fails to send an acknowledge (ACK) to the server, the server will send
 an option acknowledge (OACK) to the master client with the field MC
 (master client) set to false and send an OACK to the next multicast
 client with MC set to true. Without this option, the server will retry
 the current master client up to 5 times and then mark it done,
-proceding with the next one.
+proceeding with the next one.
 
 .TP
 .B \-V, \-\-version
--- a/logger.c
+++ b/logger.c
@@ -87,7 +87,7 @@
 }
 
 /*
- * Same as syslog but allow to format a string, like printf, when logging to
+ * Same as syslog but allows one to format a string, like printf, when logging to
  * file. This fonction will either call syslog or fprintf depending of the
  * previous call to open_logger().
  */
--- a/stats.h
+++ b/stats.h
@@ -44,7 +44,7 @@
      int number_of_err;         /* send or receive that return with error */
      int num_file_send;
      int num_file_recv;
-     int byte_send;             /* total byte transfered to client (file) */
+     int byte_send;             /* total byte transferred to client (file) */
      int byte_recv;             /* total byte read from client (file) */
 };
 
--- a/tftp.c
+++ b/tftp.c
@@ -708,9 +708,9 @@
                {
                     fclose(fp);
 #if HAVE_READLINE
-                    string = readline("Overwite local file [y/n]? ");
+                    string = readline("Overwrite local file [y/n]? ");
 #else
-                    fprintf(stderr, "Overwite local file [y/n]? ");
+                    fprintf(stderr, "Overwrite local file [y/n]? ");
                     fgets(string, MAXLEN, stdin);
                     string[strlen(string) - 1] = 0;
 #endif
@@ -908,7 +908,7 @@
           if (tftp_result == OK)
           {
                print_eng((double)data.file_size, string, sizeof(string), "%3.3f%cB");
-               fprintf(stderr, "  Bytes transfered:  %s\n", string);
+               fprintf(stderr, "  Bytes transferred:  %s\n", string);
                fprintf(stderr, "  Time of transfer: %8.3fs\n",
                        (double)(tmp.tv_sec + tmp.tv_usec * 1e-6));
                fprintf(stderr, "  Throughput:        ");
--- a/tftp_file.c
+++ b/tftp_file.c
@@ -124,7 +124,7 @@
      struct tftphdr *tftphdr = (struct tftphdr *)data->data_buffer;
      FILE *fp = NULL;           /* the local file pointer */
      int number_of_timeout = 0;
-     int convert = 0;           /* if true, do netascii convertion */
+     int convert = 0;           /* if true, do netascii conversion */
 
      int oacks = 0;             /* count OACK for improved error checking */
      int multicast = 0;         /* set to 1 if multicast */
@@ -140,7 +140,7 @@
      int prev_bitmap_hole = -1; /* the previous hole found in the bitmap */
      char string[MAXLEN];
 
-     long prev_block_number = 0; /* needed to support netascii convertion */
+     long prev_block_number = 0; /* needed to support netascii conversion */
      int temp = 0;
      int err;
 
@@ -640,10 +640,10 @@
      FILE *fp;                  /* the local file pointer */
      int number_of_timeout = 0;
      struct stat file_stat;
-     int convert = 0;           /* if true, do netascii convertion */
+     int convert = 0;           /* if true, do netascii conversion */
      char string[MAXLEN];
 
-     long prev_block_number = 0; /* needed to support netascii convertion */
+     long prev_block_number = 0; /* needed to support netascii conversion */
      long prev_file_pos = 0;
      int temp = 0;
 
--- a/tftp_mtftp.c
+++ b/tftp_mtftp.c
@@ -148,7 +148,7 @@
 
      /* check to see if conversion is requiered */
      if (strcasecmp(data->tftp_options[OPT_MODE].value, "netascii") == 0)
-          fprintf(stderr, "netascii convertion ignored\n");
+          fprintf(stderr, "netascii conversion ignored\n");
 
      /* make sure the data buffer is SEGSIZE + 4 bytes */
      if (data->data_buffer_size != (SEGSIZE + 4))
--- a/tftpd.c
+++ b/tftpd.c
@@ -186,12 +186,12 @@
      }
 
      /*
-      * Can't be started from the prompt without explicitely specifying
+      * Can't be started from the prompt without explicitly specifying
       * the --daemon option.
       */
      if (isatty(0) && !(tftpd_daemon))
      {
-	  printf("Can't be started from the prompt without explicitely "
+	  printf("Can't be started from the prompt without explicitly "
 		 "specifying the --daemon option.\n");
           tftpd_usage();
           exit(1);
@@ -345,7 +345,7 @@
      }
 
 #if defined(SOL_IP) && defined(IP_PKTINFO)
-     /* We need to retieve some information from incomming packets */
+     /* We need to retieve some information from incoming packets */
      if (setsockopt(0, SOL_IP, IP_PKTINFO, &one, sizeof(one)) != 0)
      {
           logger(LOG_WARNING, "Failed to set socket option: %s", strerror(errno));
@@ -429,7 +429,7 @@
           }
 #endif
 
-          /* A timeout of 0 is interpreted as infinity. Wait for incomming
+          /* A timeout of 0 is interpreted as infinity. Wait for incoming
              packets */
           if (!tftpd_cancel)
           {
--- a/tftpd_file.c
+++ b/tftpd_file.c
@@ -120,16 +120,16 @@
      int timeout = data->timeout;
      int number_of_timeout = 0;
      int all_blocks_received = 0; /* temporary kludge */
-     int convert = 0;           /* if true, do netascii convertion */
+     int convert = 0;           /* if true, do netascii conversion */
 
-     long prev_block_number = 0; /* needed to support netascii convertion */
+     long prev_block_number = 0; /* needed to support netascii conversion */
      int temp = 0;
 
      /* look for mode option */
      if (strcasecmp(data->tftp_options[OPT_MODE].value, "netascii") == 0)
      {
           convert = 1;
-          logger(LOG_DEBUG, "will do netascii convertion");
+          logger(LOG_DEBUG, "will do netascii conversion");
      }
 
      /* file name verification */
@@ -430,7 +430,7 @@
      struct client_info *client_old = NULL;
      struct tftp_opt options[OPT_NUMBER];
 
-     long prev_block_number = 0; /* needed to support netascii convertion */
+     long prev_block_number = 0; /* needed to support netascii conversion */
      long prev_file_pos = 0;
      int temp = 0;
 
@@ -438,7 +438,7 @@
      if (strcasecmp(data->tftp_options[OPT_MODE].value, "netascii") == 0)
      {
           convert = 1;
-          logger(LOG_DEBUG, "will do netascii convertion");
+          logger(LOG_DEBUG, "will do netascii conversion");
      }
 
      /* file name verification */
@@ -631,7 +631,7 @@
                               data->data_buffer, data->data_buffer_size);
 
                /* We are done */
-               logger(LOG_INFO, "Client transfered to %p", thread);
+               logger(LOG_INFO, "Client transferred to %p", thread);
                fclose(fp);
                return OK;
           }
@@ -1004,7 +1004,7 @@
                     }
                     else
                     {
-                         logger(LOG_INFO, "No more client, end of tranfers");
+                         logger(LOG_INFO, "No more client, end of transfers");
                          fclose(fp);
                          return OK;
                     }
